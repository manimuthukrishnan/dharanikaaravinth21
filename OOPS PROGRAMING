//TIP To <b>Run</b> code, press <shortcut actionId="Run"/> or
// click the <icon src="AllIcons.Actions.Execute"/> icon in the gutter.
public class Main {
    public static void main(String[] args) {
        //TIP Press <shortcut actionId="ShowIntentionActions"/> with your caret at the highlighted text
        // to see how IntelliJ IDEA suggests fixing it.
        System.out.printf("Hello and welcome!");

        for (int i = 1; i <= 5; i++) {
            //TIP Press <shortcut actionId="Debug"/> to start debugging your code. We have set one <icon src="AllIcons.Debugger.Db_set_breakpoint"/> breakpoint
            // for you, but you can always add more by pressing <shortcut actionId="ToggleLineBreakpoint"/>.
            System.out.println("i = " + i);
        }
    }
}
public class Book {
    private int bookID;
    private String title;
    private String author;
    private boolean isAvailable;

    // Constructor to initialize book attributes
    public Book(int bookID, String title, String author, boolean isAvailable) {
        this.bookID = bookID;
        this.title = title;
        this.author = author;
        this.isAvailable = isAvailable;
    }

    // Getter and Setter methods
    public int getBookID() {
        return bookID;
    }

    public void setBookID(int bookID) {
        this.bookID = bookID;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getAuthor() {
        return author;
    }

    public void setAuthor(String author) {
        this.author = author;
    }

    public boolean isAvailable() {
        return isAvailable;
    }

    public void setAvailable(boolean available) {
        isAvailable = available;
    }

    @Override
    public String toString() {
        return "BookID: " + bookID + ", Title: " + title + ", Author: " + author + ", Available: " + isAvailable;
    }
}
public class Library {
    private Book[] books;
    private int currentSize;

    // Constructor to initialize the books array
    public Library() {
        books = new Book[5];  // Can store up to 5 books
        currentSize = 0;
    }

    // Method to add a book to the library
    public void addBook(Book book) {
        if (currentSize < books.length) {
            books[currentSize++] = book;
            System.out.println("Book added successfully.");
        } else {
            System.out.println("Library is full. Cannot add more books.");
        }
    }

    // Method to remove a book from the library by bookID
    public void removeBook(int bookID) {
        for (int i = 0; i < currentSize; i++) {
            if (books[i].getBookID() == bookID) {
                books[i] = books[currentSize - 1]; // Replace with the last book
                books[currentSize - 1] = null;     // Set the last slot to null
                currentSize--;
                System.out.println("Book removed successfully.");
                return;
            }
        }
        System.out.println("Book not found.");
    }

    // Method to display all books in the library
    public void displayBooks() {
        if (currentSize == 0) {
            System.out.println("No books in the library.");
        } else {
            for (int i = 0; i < currentSize; i++) {
                System.out.println(books[i]);
            }
        }
    }

    // Method to search for a book by its ID
    public Book searchBook(int bookID) {
        for (int i = 0; i < currentSize; i++) {
            if (books[i].getBookID() == bookID) {
                return books[i];
            }
        }
        return null;
    }
}
import java.util.Scanner;

public class BookManagementSystem {
    public static void main(String[] args) {
        Library library = new Library();
        Scanner scanner = new Scanner(System.in);
        int choice;

        do {
            System.out.println("\n--- Library Management System ---");
            System.out.println("1. Add Book");
            System.out.println("2. Remove Book");
            System.out.println("3. Display Books");
            System.out.println("4. Search Book by ID");
            System.out.println("5. Exit");
            System.out.print("Enter your choice: ");
            choice = scanner.nextInt();
            scanner.nextLine();  // Consume the newline character

            switch (choice) {
                case 1:
                    System.out.print("Enter Book ID: ");
                    int bookID = scanner.nextInt();
                    scanner.nextLine();  // Consume the newline
                    System.out.print("Enter Book Title: ");
                    String title = scanner.nextLine();
                    System.out.print("Enter Book Author: ");
                    String author = scanner.nextLine();
                    System.out.print("Is the Book Available (true/false): ");
                    boolean isAvailable = scanner.nextBoolean();
                    Book book = new Book(bookID, title, author, isAvailable);
                    library.addBook(book);
                    break;

                case 2:
                    System.out.print("Enter Book ID to Remove: ");
                    int removeID = scanner.nextInt();
                    library.removeBook(removeID);
                    break;

                case 3:
                    library.displayBooks();
                    break;

                case 4:
                    System.out.print("Enter Book ID to Search: ");
                    int searchID = scanner.nextInt();
                    Book foundBook = library.searchBook(searchID);
                    if (foundBook != null) {
                        System.out.println("Book Found: " + foundBook);
                    } else {
                        System.out.println("Book not found.");
                    }
                    break;

                case 5:
                    System.out.println("Exiting system.");
                    break;

                default:
                    System.out.println("Invalid choice. Try again.");
            }
        } while (choice != 5);

        scanner.close();
    }
}
--- Library Management System ---
        1. Add Book
2. Remove Book
3. Display Books
4. Search Book by ID
5. Exit
Enter your choice: 1
Enter Book ID: 101
Enter Book Title: Java Programming
Enter Book Author: John Doe
Is the Book Available (true/false): true
Book added successfully.

--- Library Management System ---
        1. Add Book
2. Remove Book
3. Display Books
4. Search Book by ID
5. Exit
Enter your choice: 3
BookID: 101, Title: Java Programming, Author: John Doe, Available: true


public interface Taxable {
    // Constants for sales tax and income tax
    double salesTax = 0.07; // 7% Sales tax
    double incomeTax = 0.105; // 10.5% Income tax

    // Abstract method to calculate tax
    double calcTax();
}
public class Employee implements Taxable {
    private int empId;
    private String name;
    private double salary;

    // Constructor to initialize employee details
    public Employee(int empId, String name, double salary) {
        this.empId = empId;
        this.name = name;
        this.salary = salary;
    }

    // Implementing the calcTax() method to calculate income tax
    @Override
    public double calcTax() {
        return salary * incomeTax;
    }

    // Getters and setters
    public int getEmpId() {
        return empId;
    }

    public String getName() {
        return name;
    }

    public double getSalary() {
        return salary;
    }
}
public class Product implements Taxable {
    private int pid;
    private double price;
    private int quantity;

    // Constructor to initialize product details
    public Product(int pid, double price, int quantity) {
        this.pid = pid;
        this.price = price;
        this.quantity = quantity;
    }

    // Implementing the calcTax() method to calculate sales tax
    @Override
    public double calcTax() {
        return price * quantity * salesTax;
    }

    // Getters and setters
    public int getPid() {
        return pid;
    }

    public double getPrice() {
        return price;
    }

    public int getQuantity() {
        return quantity;
    }
}
import java.util.Scanner;

public class DriverMain {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Accepting employee details
        System.out.print("Enter Employee ID: ");
        int empId = scanner.nextInt();
        scanner.nextLine(); // Consume the newline
        System.out.print("Enter Employee Name: ");
        String empName = scanner.nextLine();
        System.out.print("Enter Employee Salary: ");
        double empSalary = scanner.nextDouble();

        // Creating an Employee object
        Employee employee = new Employee(empId, empName, empSalary);

        // Accepting product details
        System.out.print("Enter Product ID: ");
        int pid = scanner.nextInt();
        System.out.print("Enter Product Price: ");
        double price = scanner.nextDouble();
        System.out.print("Enter Product Quantity: ");
        int quantity = scanner.nextInt();

        // Creating a Product object
        Product product = new Product(pid, price, quantity);

        // Calculating and displaying taxes
        System.out.println("\nEmployee Income Tax: " + employee.calcTax());
        System.out.println("Product Sales Tax: " + product.calcTax());

        scanner.close();
    }
}
Enter Employee ID: 101
Enter Employee Name: John Doe
Enter Employee Salary: 50000
Enter Product ID: 201
Enter Product Price: 100
Enter Product Quantity: 2

Employee Income Tax: 5250.0
Product Sales Tax: 14.0
